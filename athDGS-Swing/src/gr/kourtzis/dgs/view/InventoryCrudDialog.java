/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gr.kourtzis.dgs.view;

import gr.kourtzis.dgs.entity.Game;
import gr.kourtzis.dgs.entity.Inventory;
import javax.swing.JSpinner;

/**
 *
 * @author Athanasios Kourtzis
 */
public class InventoryCrudDialog extends javax.swing.JDialog {
    private Game game;
    private Inventory inventory;
    private boolean saved;
    /**
     * Creates new form inventoryCrudDialog
     */
    public InventoryCrudDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        inventory = new Inventory();
        
        spinnerAmount.addChangeListener(event -> {
            JSpinner spinner = (JSpinner) event.getSource();
            inventory.setQuantity((int) spinner.getValue());
        });
        
        saved = false;
    }
    
    /**
     * The method creates a new inventory for a selected game.
     * @param inventory The inventory to be created. 
     * @param game The game for which a inventory is created. 
     * @param message The message shown in the title bar.
     * @return True if the inventory was created of false if
     *         the user aborts the dialog.
     */
    public boolean showCreateDialog(final Inventory inventory, final Game game, final String message) {
        prepareFields("Create", true, true);
        return showDialog(inventory, game, message);
    }
    
    /**
     * The method updates an existing inventory in the database.
     * @param inventory The inventory to be edited.
     * @param game The game for which the inventory is edited.
     * @param message The message shown in the title bar.
     * @return True if the inventory was updated of false if 
     *         the user aborts the dialog.
     */
    public boolean showUpdateDialog(final Inventory inventory, final Game game, final String message) {
        prepareFields("Update", true, true);
        return showDialog(inventory, game, message);
    }
    
    /**
     * The method deletes an existing inventory from the database.
     * @param inventory The inventory we want to delete.
     * @param game The game for which we delete the inventory.
     * @param message The message shown in the title bar.
     * @return True if the inventory was successfully deleted or false
     *         if the dialog was aborted.
     */
    public boolean showDeleteDialog(final Inventory inventory, final Game game, final String message) {
        prepareFields("Delete", false, false);
        return showDialog(inventory, game, message);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textGame = new javax.swing.JTextField();
        labelPrice = new javax.swing.JLabel();
        textPrice = new javax.swing.JTextField();
        labelAmount = new javax.swing.JLabel();
        buttonCancel = new javax.swing.JButton();
        buttonConfirm = new javax.swing.JButton();
        labelGame = new javax.swing.JLabel();
        spinnerAmount = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        textGame.setEditable(false);

        labelPrice.setText("Price");

        labelAmount.setText("Amount of available keys");

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonConfirm.setText("Save");
        buttonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConfirmActionPerformed(evt);
            }
        });

        labelGame.setText("Game");

        spinnerAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 500, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonConfirm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(labelPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelGame, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(textGame, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                                .addComponent(textPrice)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(labelAmount)
                            .addGap(18, 18, 18)
                            .addComponent(spinnerAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textGame)
                    .addComponent(labelGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textPrice)
                    .addComponent(labelPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(85, 85, 85))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spinnerAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonCancel)
                            .addComponent(buttonConfirm))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        saved = false;
        dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConfirmActionPerformed
        saved = true;
        readTextFields();
        if(saved) 
            dispose();
    }//GEN-LAST:event_buttonConfirmActionPerformed

    private boolean showDialog(final Inventory inventory, final Game game, final String title) {
        setTitle(title);
        
        this.inventory = inventory;
        this.game = game;
        
        fillTextFields();
        textPrice.requestFocus();
        setVisible(true);
        
        return saved;
    }
    
    private void prepareFields(final String buttonCaption, 
                               boolean genreButtonEnabled,
                               boolean quantityEnabled) {
        buttonConfirm.setText(buttonCaption);
        
        textPrice.setEditable(genreButtonEnabled);
        spinnerAmount.setEnabled(quantityEnabled);
    }
    
    private void fillTextFields() {
        if(game != null) {
            if (game.getGameId() != 0) 
                textGame.setText(String.valueOf(game.getTitle()));
        }
        
        if(inventory != null) {
            textPrice.setText(String.valueOf(inventory.getPrice()));
            spinnerAmount.setValue(inventory.getQuantity());
        }
    }
    
    private void readTextFields() {
        if (inventory != null) {
            double price = 0.0;
            try {
                price = Double.parseDouble(textPrice.getText());
                saved = price > 0.0;
            }
            catch(NumberFormatException ex) {
                System.out.println("Price is not a decimal number!");
                System.out.println("Exception occured: " + ex.getMessage());
                saved = false;
            }
            
            inventory.setPrice(price);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonConfirm;
    private javax.swing.JLabel labelAmount;
    private javax.swing.JLabel labelGame;
    private javax.swing.JLabel labelPrice;
    private javax.swing.JSpinner spinnerAmount;
    private javax.swing.JTextField textGame;
    private javax.swing.JTextField textPrice;
    // End of variables declaration//GEN-END:variables
}
