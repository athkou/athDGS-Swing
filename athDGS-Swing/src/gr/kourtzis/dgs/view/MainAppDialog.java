/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gr.kourtzis.dgs.view;

import gr.kourtzis.dgs.ejb.DigitalGameStoreBeanRemote;
import gr.kourtzis.dgs.entity.Account;
import gr.kourtzis.dgs.entity.Activation;
import gr.kourtzis.dgs.entity.Address;
import gr.kourtzis.dgs.entity.Category;
import gr.kourtzis.dgs.entity.Customer;
import gr.kourtzis.dgs.entity.Game;
import gr.kourtzis.dgs.entity.User;
import gr.kourtzis.dgs.util.SwingTools;
import gr.kourtzis.dgs.util.Util;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Resource;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Queue;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.JOptionPane;

/**
 *
 * @author Athanasios Kourtzis
 */
public class MainAppDialog extends javax.swing.JDialog {
    private static final String DGS_REGISTER_ACCOUNT_CONNECTION_FACTORY = "jms/athDgsAccountConnectionFactory";
    private static final String DGS_REGISTER_ACCOUNT_QUEUE = "jms/athDgsAccountQueue";
    
    @Resource(mappedName = DGS_REGISTER_ACCOUNT_CONNECTION_FACTORY)
    private ConnectionFactory connectionFactory;
    
    @Resource(mappedName = DGS_REGISTER_ACCOUNT_QUEUE)
    private Queue queue;
    
    private CategoryDialog categoryDialog;
    private GameDialog gameDialog;
    private SignInDialog signInDialog;
    private InventoryDialog inventoryDialog;
    
    private Context context;

    /**
     * Creates new form MainAppDialog
     */
    public MainAppDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initContext();
        adminMenu.setEnabled(false);
        userMenu.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        conMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        userMenu = new javax.swing.JMenu();
        userMenuItem = new javax.swing.JMenuItem();
        adminMenu = new javax.swing.JMenu();
        categoryMenuItem = new javax.swing.JMenuItem();
        gamesMenuItem = new javax.swing.JMenuItem();
        inventoryMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        populateCatGamesMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        fileMenu.setText("File");

        conMenuItem.setText("Connect...");
        conMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(conMenuItem);

        mainMenuBar.add(fileMenu);

        editMenu.setText("Edit");

        userMenu.setText("User");

        userMenuItem.setText("Populate users table");
        userMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(userMenuItem);

        editMenu.add(userMenu);

        adminMenu.setText("Administrator");

        categoryMenuItem.setText("Category");
        categoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryMenuItemActionPerformed(evt);
            }
        });
        adminMenu.add(categoryMenuItem);

        gamesMenuItem.setText("Games");
        gamesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gamesMenuItemActionPerformed(evt);
            }
        });
        adminMenu.add(gamesMenuItem);

        inventoryMenuItem.setText("Inventory");
        inventoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryMenuItemActionPerformed(evt);
            }
        });
        adminMenu.add(inventoryMenuItem);
        adminMenu.add(jSeparator1);

        populateCatGamesMenu.setText("Populate Category-Games tables");
        populateCatGamesMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                populateCatGamesMenuActionPerformed(evt);
            }
        });
        adminMenu.add(populateCatGamesMenu);

        editMenu.add(adminMenu);

        mainMenuBar.add(editMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void categoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryMenuItemActionPerformed
        if(categoryDialog == null)
            categoryDialog = new CategoryDialog(null, true);
        
        SwingTools.centerOnScreen(0, categoryDialog);
        categoryDialog.setVisible(true);
    }//GEN-LAST:event_categoryMenuItemActionPerformed

    private void gamesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gamesMenuItemActionPerformed
        if(gameDialog == null)
            gameDialog= new GameDialog(null, true);
        
        SwingTools.centerOnScreen(0, gameDialog);
        gameDialog.setVisible(true);
    }//GEN-LAST:event_gamesMenuItemActionPerformed

    private void conMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conMenuItemActionPerformed
        if(signInDialog == null)
            signInDialog = new SignInDialog(null, true);
        
        SwingTools.centerOnScreen(0, signInDialog);
        signInDialog.setVisible(true);
        
        if(!signInDialog.isCancelled()) {
            int usrReg = signInDialog.userRegistered();
            System.out.println(usrReg);
            
            switch(usrReg) {
                case 1:
                    JOptionPane.showMessageDialog(null, "Succesfully connected.");
                    adminMenu.setEnabled(true);
                    break;
                case 2:
                    JOptionPane.showMessageDialog(null, "Succesfully connected.");
                    adminMenu.setEnabled(false);
                    break;
                case -1:
                    adminMenu.setEnabled(false);
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Email and/or password are not correct.");
                    break;
            }
            
        }
    }//GEN-LAST:event_conMenuItemActionPerformed

    private void populateCatGamesMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_populateCatGamesMenuActionPerformed
        Category fps = new Category("First person shooter", "First-person shooter (FPS) is a video game genre "
                + "centered on gun and other weapon-based combat in a first-person perspective; that is, "
                + "the player experiences the action through the eyes of the protagonist.");
        fps.addGame(new Game("Quake III Arena", "Quake III Arena is a multiplayer-focused first-person shooter video game released in December 1999. "
                + "The game was developed by id Software and featured music composed by "
                + "Sonic Mayhem and Front Line Assembly founder Bill Leeb. Quake III Arena is the third game in the Quake series; "
                + "it differs from previous games by excluding a story-based single-player mode and highly focusing on multiplayer gameplay. "
                + "The single-player mode is played against computer-controlled bots.\n" +
                  "Notable features of Quake III Arena include the minimalist design, "
                + "lacking rarely used items and features, the extensive customizability of player settings such as field of view, "
                + "texture detail and enemy model, and advanced movement features such as strafe-jumping and rocket-jumping. "));
        fps.addGame(new Game("Return to Castle Wolfenstein", "Return to Castle Wolfenstein is a first-person shooter video game published by Activision,"
                + " released on November 19, 2001 for Microsoft Windows and subsequently for PlayStation 2, Xbox, Linux and Macintosh. "
                + "The game serves as both a remake and a reboot to the Wolfenstein series. "
                + "It was developed by Gray Matter Interactive and Nerve Software developed its multiplayer mode. "
                + "id Software, the creators of Wolfenstein 3D, oversaw the development and were credited as executive producers."
                + " The multiplayer side eventually became the most popular part of the game, and was influential in the genre."));
        fps.addGame(new Game("No One Lives Forever", "The Operative: No One Lives Forever (sometimes abbreviated as NOLF) is a first-person shooter video game "
                + "with stealth gameplay elements, developed by Monolith Productions and published by Fox Interactive, "
                + "released for Microsoft Windows in 2000. The game was ported later to the PlayStation 2 and Mac OS X."
                + "A story-driven game set in the 1960s, No One Lives Forever has been critically acclaimed for its stylistic representation of "
                + "the era in the spirit of many spy films and television series of that decade, as well as for its humor. "
                + "Players control female protagonist Cate Archer, who works for a secret organization that watches over world peace. "
                + "In addition to a range of firearms, the game contains several gadgets, which are disguised as ordinary female fashion items. "));
        
        Category platform = new Category("Platform", " In a platformer the player controlled character must jump and climb between suspended platforms "
                + "while avoiding obstacles. Environments often feature uneven terrain of varying height that must be traversed. "
                + "The player often has some control over the height and distance of jumps to avoid letting their character fall to their death or miss necessary jumps.");
        
        platform.addGame(new Game("A Hat in Time", "A Hat in Time is a platform action-adventure game set in an open world environment and "
                + "played from a third-person perspective. The gameplay style has been described by several editors to be similar to Nintendo 64 platformers such as "
                + "Super Mario 64 and Banjo-Kazooie. The player travels between four open levels, which can be freely explored without time limits. "
                + "The player can collect various items, solve puzzles, and use an umbrella to combat enemies. "
                + "The primary objective is to collect \"Time Pieces\", 40 of which can be found in the game, which unlock additional "
                + "levels as more are collected.[13] After being defeated, the enemies drop \"Pons\", currency that can be used to "
                + "unlock additional challenges and purchase badges that increase Hat Kid's abilities."));
        platform.addGame(new Game("Spyro Reignited Trilogy", "Spyro Reignited Trilogy is a platform video game developed by Toys "
                + "for Bob and published by Activision. It's a collection of remasters of the first three games in the Spyro series: "
                + "Spyro the Dragon, Spyro 2: Ripto's Rage! and Spyro: Year of the Dragon. The game was released for the PlayStation 4 and Xbox One in November 2018, "
                + "and is due to be released for Microsoft Windows and Nintendo Switch in September 2019. "));
        
        Category rts = new Category("Real-time strategy", "In an RTS, the participants position and maneuver units and structures "
                + "under their control to secure areas of the map and/or destroy their opponents' assets. In a typical RTS, it "
                + "is possible to create additional units and structures during the course of a game.");
        
        rts.addGame(new Game("Warcraft III: Reign of Chaos", "Warcraft III takes place on a map of varying size, such as large plains and fields, with terrain features "
                + "like rivers, mountains, seas, or cliffs. The map is initially hidden from view and only becomes visible through exploration."
                + " Areas no longer in sight range of an allied unit or building are covered with the fog of war, meaning that while the terrain remains visible, "
                + "changes such as enemy troop movements and building construction are not. During a game, players must establish settlements to gain resources, "
                + "defend against others, and train units to explore the map and fight computer controlled foes. There are three main resources that are managed "
                + "in Warcraft III: gold, lumber, and food."
                + " The first two are required to construct units and buildings, while food restricts the maximum number of units that can be possessed at the same time."
                + " Additionally, a new \"upkeep\" system means that producing units over certain amounts will decrease the amount of gold one can earn, "
                + "compelling players to focus on playing with a limited number of units to avoid penalties."));
        rts.addGame(new Game("StarCraft", "Blizzard Entertainment's use of three distinct races in StarCraft is widely credited with revolutionizing the "
                + "real-time strategy genre. All units are unique to their respective races, and while rough comparisons can be drawn between certain "
                + "types of units in the technology tree, every unit performs differently and requires different tactics for a player to succeed. "));
        rts.addGame(new Game("Empire Earth", "Empire Earth is a history-based real-time strategy game. Empire Earth uses 3D graphics."
                + " The game itself contains many unique and innovative features, including a \"morale\" system, which directly "
                + "affects individual units' statistics. It also incorporates a \"hero\" system. These can be built at the town center or capital. "
                + "There are two types of heroes, Strategist heroes who heal surrounding units and can demoralize enemy units while Warrior "
                + "heroes give morale to surrounding units and have greater attack power. The player has the option of creating their own civilization "
                + "with unique bonuses. Empire Earth has a map editor included."));
        
        Category grant = new Category("Grand strategy wargame", "A grand strategy wargame is a wargame that places focus on grand strategy: "
                + "military strategy at the level of movement and use of an entire nation state or empire's resources.");
        
        grant.addGame(new Game("Europa Universalis IV", "The game has been formed to begin historically, with real events occurring in real time. The "
                + "game itself is an interactive map of Earth divided into the provinces that compose nations. Each of these provinces contribute to their "
                + "country either positively or negatively, as provinces can both provide resources to a nation and serve as a point of unrest and rebellion. "
                + "The gameplay requires the player to lead a nation by finding a balance of military, diplomacy and economy. "));
        grant.addGame(new Game("Crusader Kings II", "The game is a dynasty simulator where the player controls a Medieval dynasty from 1066 to 1453, "
                + "though the DLC The Old Gods and Charlemagne allow for earlier start dates of 867 and 769, respectively. "
                + "Through the strategic use of war, marriages and assassinations among many other things, the player works to achieve success for their dynasty."));
        grant.addGame(new Game("Hearts of Iron IV", "Hearts of Iron IV is a grand strategy wargame that primarily revolves around World War II. "
                + "The player may play as any nation in the world in the 1936 or 1939 start dates in singleplayer or multiplayer, although the game is not designed to "
                + "go beyond 1948. A nation's military is divided between naval forces, aerial forces, and ground forces. For the ground forces, the player may train, "
                + "customize, and command divisions consisting of various types of infantry, tanks, and other units."));
        
        Category city = new Category("City building", "A city-building game, or town-building game, is a genre of simulation video game where players act as the "
                + "overall planner and leader of a city or town, looking down on it from above, and being responsible for its growth and management strategy.");
        
        city.addGame(new Game("SimCity 4", "SimCity 4 was released on January 14, 2003. As with previous SimCity titles, SimCity 4 (Sim4) places the player in the role"
                + " of a mayor (or several mayors), tasked with populating and developing tracts of lands into cities, while fulfilling the needs of fellow Sims "
                + "who live there. Cities are now located in regions, which are divided into segments, each of which can be developed. Each region "
                + "represents the metropolitan area of a city, while individual cities represent districts. "));
        city.addGame(new Game("Cities: Skylines", "Cities: Skylines is a city-building game developed by Colossal Order and published by Paradox Interactive. "
                + "The game is a single-player open-ended city-building simulation. Players engage in urban planning by controlling zoning, road placement, "
                + "taxation, public services, and public transportation of an area. Players work to maintain various elements of the city, including its budget, "
                + "health, employment, and pollution levels. Players are also able to maintain a city in a sandbox mode, which provides unrestricted creative freedom for"
                + " the player."));
        
        Category rpg = new Category("Role playing games", "A role-playing game is a video game genre where the player controls the actions "
                + "of a character (and/or several party members) immersed in some well-defined world.");
        
        rpg.addGame(new Game("Path of Exile", "The player controls a single character from an overhead perspective and explores large outdoor areas and caves or dungeons, "
                + "battling monsters and fulfilling quests from NPCs to gain experience points and equipment. Players can initially choose from six available"
                + " classes to play as (Duelist, Marauder, Ranger, Shadow, Templar and Witch).[11][12] Each of these classes are aligned with one or two of the "
                + "three core attributes: Strength, Dexterity, or Intelligence. The final class, the Scion, can be unlocked by freeing her near the end of Act 3, "
                + "and is aligned with all three attributes.."));
        rpg.addGame(new Game("Diablo II", "Diablo II's storyline progresses through four chapters or \"Acts\". Each act follows a predetermined path, but the wilderness "
                + "areas and dungeons between key cities are randomly generated. The player progresses through the story by completing a series of quests within each act, "
                + "while there are also optional side dungeons for extra monsters and experience."));
        
        List<Category> categories = new ArrayList<>();
        
        categories.add(rpg);
        categories.add(city);
        categories.add(grant);
        categories.add(rts);
        categories.add(platform);
        categories.add(fps);
        
        categories.forEach(it -> {
            System.out.println("Adding category: " + it.getGenre());
            lookupDigitalGameStoreBeanRemote().addCategory(it);
        });
        
        JOptionPane.showMessageDialog(null, "Categories and games succesfully added");
    }//GEN-LAST:event_populateCatGamesMenuActionPerformed

    private void inventoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryMenuItemActionPerformed
        if(inventoryDialog == null)
            inventoryDialog = new InventoryDialog(null, true);
        else
            inventoryDialog.initMaps();
        
        SwingTools.centerOnScreen(0, inventoryDialog);
        inventoryDialog.setVisible(true);
    }//GEN-LAST:event_inventoryMenuItemActionPerformed

    private void userMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userMenuItemActionPerformed
        try {
            saveAccount(prepareAccount("Jenny", "Krause", "admin", true, "admin@athDGS.de", "passwordencrypted"));
            saveAccount(prepareAccount("Hans", "Mustermeier", "admin", true, "bb@test.de", "passwordencrypted"));
            saveAccount(prepareAccount("Jens", "Meier", "user", true, "meier.jens@gmail.de", "qQ!1"));
            saveAccount(prepareAccount("Fritz", "Walter", "support", true, "support.walter@athDGS.de", "qQ!1"));
        }
        catch(RuntimeException ex) {
            System.out.println("Could not create and save the users to the database");
            Logger.getLogger(MainAppDialog.class.getName()).log(Level.SEVERE, null, ex);
            
            return ;
        }
        
        JOptionPane.showMessageDialog(null, "Users added to the database");
    }//GEN-LAST:event_userMenuItemActionPerformed

    private Account prepareAccount(final String firstName,
                                final String lastName,
                                final String role,
                                boolean activateAccount,
                                final String email,
                                final String password) {
        User user = new User();
        Activation activation = new Activation();
        Customer customer = new Customer();
        Address address = new Address();
        
        customer.setFirstName(firstName);
        customer.setLastName(lastName);
        
        activation.setUserActivated(activateAccount);
        activation.setActivationToken(UUID.randomUUID().toString());
        
        user.setAppRole(role);
        user.setEmail(email);
        user.setPassword(Util.createPassword(password));
        
        address.setCustomer(customer);
        customer.setUser(user);
        activation.setUser(user);
        
        Account account = new Account(user, customer, activation, address, false);
        Date now = new Date();
        account.getActivation().setCreatedOn(now);
        account.getActivation().setExpirationDate(Account.calculateExpireDate(Account.EXPIRATION));
//        account.setOrphanAccountDate(Account.calculateExpireDate(now, 10));
        
        return account;
    }
    
    private void saveAccount(final Account account) {
        MessageProducer messageProducer = null;
        Session session = null;
        Connection connection = null;
        Context context = null;
        
        try {
            Properties props = new Properties();
            props.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
            props.setProperty("java.naming.factory.url.pkgs", "com.sun.enterprise.naming");
            props.setProperty("java.naming.factory.state", "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");
            props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");

            context = new InitialContext(props);
            
            connectionFactory = (ConnectionFactory) context.lookup(DGS_REGISTER_ACCOUNT_CONNECTION_FACTORY);
            queue = (Queue) context.lookup(DGS_REGISTER_ACCOUNT_QUEUE);
            
            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            
            messageProducer = session.createProducer((Destination) queue);
            ObjectMessage objectMessage = session.createObjectMessage(account);
            messageProducer.send(objectMessage);
            
            context.close();
            messageProducer.close();
            session.close();
            connection.close();
            
        }
        catch (JMSException | NamingException ex) {
            Logger.getLogger(MainAppDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainAppDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainAppDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainAppDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainAppDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainAppDialog dialog = new MainAppDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                SwingTools.centerOnScreen(0, dialog);
                dialog.setVisible(true);
            }
        });
    }
    
    private DigitalGameStoreBeanRemote lookupDigitalGameStoreBeanRemote() {
        return (DigitalGameStoreBeanRemote) lookupObjectBeanRemote("ejb/athDigitalGameStore");
    }
    
    private Object lookupObjectBeanRemote(final String lookupName) {
        Object object = null;
        try {
            object = context.lookup(lookupName);
        }
        catch(NamingException ex) {
            Logger.getLogger(MainAppDialog.class.getName()).log(Level.SEVERE, null, ex);
            throw new RuntimeException(ex);
        }
        
        return object;
    }
    
    private void initContext() {
        Properties props = new Properties();
        props.setProperty(Context.INITIAL_CONTEXT_FACTORY, "com.sun.enterprise.naming.SerialInitContextFactory");
        props.setProperty(Context.URL_PKG_PREFIXES, "com.sun.enterprise.naming");
        props.setProperty(Context.STATE_FACTORIES, "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");
        props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");
        props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");
        
        try {
            context = new InitialContext(props);
            
        } catch (NamingException ex) {
            Logger.getLogger(MainAppDialog.class.getName()).log(Level.SEVERE, null, ex);
            throw new RuntimeException(ex);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu adminMenu;
    private javax.swing.JMenuItem categoryMenuItem;
    private javax.swing.JMenuItem conMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem gamesMenuItem;
    private javax.swing.JMenuItem inventoryMenuItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenuItem populateCatGamesMenu;
    private javax.swing.JMenu userMenu;
    private javax.swing.JMenuItem userMenuItem;
    // End of variables declaration//GEN-END:variables
}
